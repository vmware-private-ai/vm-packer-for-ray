# Copyright 2023 VMware, Inc.
# SPDX-License-Identifier: Apache-2.0

---
- name: "Configure SSH for Public Key Authentication."
  shell: |
    sudo sed -i 's/.*PubkeyAuthentication.*/PubkeyAuthentication yes/' /etc/ssh/sshd_config
- name: "Setting hostname to localhost."
  shell: |
    cat /dev/null > /etc/hostname
    hostnamectl set-hostname localhost
- name: "Restarting the SSH daemon."
  shell: |
    sudo systemctl restart sshd
- name: "Disabling and clean tmp."
  shell: |
    sudo sed -i 's/D/#&/' /usr/lib/tmpfiles.d/tmp.conf
- name: "Setting SSH keys to regenerate on reboot, if neccessary."
  shell: |
    sudo tee /etc/rc.local << EOF
    #!/bin/bash
    test -f /etc/ssh/ssh_host_dsa_key || dpkg-reconfigure openssh-server
    exit 0
    EOF
    sudo chmod +x /etc/rc.local
- name: "Setting guest operating system information."
  shell: |
    sudo tee -a /etc/vmware-tools/tools.conf << EOF
    [guestosinfo]
    short-name = other5xLinux64Guest
    EOF
- name: "Configuring the resolve conf."
  shell: |
    echo nameserver 8.8.8.8 >> /etc/resolvconf/resolv.conf.d/base && sudo resolvconf -u
- name: "Configuring the cloud.cfg for cloud-init."
  shell: |
    echo disable_vmware_customization: false >> /etc/cloud/cloud.cfg && sudo resolvconf -u
    echo disable_vmware_customization: false >> /etc/cloud/cloud.cfg && sudo resolvconf -u
- name: "Copying customize.sh to /root"
  shell: |
    sudo cp /tmp/*sh /root/
- name: "Installing the Instant Clone Customization Engine."
  shell: |
    sudo /usr/bin/dpkg -i --force-all /tmp/vmware-gosc_12.1.0.25580-20029049_amd64.deb >> ./dpkg.log 2>&1
- name: "Pulling latest docker image from {{RAY_DOCKER_IMAGE}}"
  shell: |
    sudo tee /tmp/pull-ray-image.sh << EOF
    #!/bin/bash
    sudo systemctl daemon-reload  || exit
    sudo systemctl restart docker || exit
    if [[ ! -z "{{RAY_DOCKER_USERNAME}}" && ! -z "{{RAY_DOCKER_PASSWORD}}" ]]; then
        sudo docker login {{RAY_DOCKER_REPO}}  -u {{RAY_DOCKER_USERNAME}} -p {{RAY_DOCKER_PASSWORD}} || exit
    fi
    sudo docker pull {{RAY_DOCKER_IMAGE}} || exit
    EOF
    sudo chmod +x /tmp/pull-ray-image.sh
    sudo bash /tmp/pull-ray-image.sh
- name: "Pulling custom docker image from {{CUSTOM_DOCKER_IMAGES}}"
  shell: |
    sudo tee /tmp/pull-custom-image.sh << EOF
    #!/bin/bash
    IFS=","
    CUSTOM_DOCKER_IMAGES="{{CUSTOM_DOCKER_IMAGES}}"
    CUSTOM_DOCKER_IMAGE_ARR=(\$CUSTOM_DOCKER_IMAGES)
    for CUSTOM_DOCKER_IMAGE in \${CUSTOM_DOCKER_IMAGE_ARR[@]}
    do
      sudo docker pull \${CUSTOM_DOCKER_IMAGE} || exit
    done
    EOF
    sudo chmod +x /tmp/pull-custom-image.sh
    sudo bash /tmp/pull-custom-image.sh
  when: CUSTOM_DOCKER_IMAGES != ""
- name: "Creating the Cronjob for running the script at reboot."
  shell: |
    sudo chmod +x /root/customize.sh && sudo touch /etc/crontab && sudo crontab -l; echo "@reboot /root/customize.sh" | crontab -
- name: "Enable the auto setting online for the hot-added CPU and memory"
  shell: |
    echo 'ACTION=="add", SUBSYSTEM=="cpu", ATTR{online}=="0", ATTR{online}="1"' | sudo tee /etc/udev/rules.d/94-hotplug-cpu-mem.rules
    echo 'ACTION=="add", SUBSYSTEM=="memory", ATTR{state}=="offline", ATTR{state}="online"' | sudo tee -a /etc/udev/rules.d/94-hotplug-cpu-mem.rules

# GPU related optional operations
# url: "https://developer.download.nvidia.com/compute/cuda/12.2.1/local_installers/cuda_12.2.1_535.86.10_linux.run"\
- name: "Block the default nouveau driver."
  shell: |
    echo -e "blacklist nouveau\noptions nouveau modeset=0" | sudo tee /etc/modprobe.d/blacklist-nouveau.conf
    sudo update-initramfs -u
  when: GPU_DRIVER_DOWNLOAD_URL != ""
- name: "Install more linux dependencies."
  shell: |
    sudo apt install -y  binutils cpp gcc make psmisc linux-headers-$(uname -r) libmspack-dev build-essential libglvnd-dev pkg-config
  when: GPU_DRIVER_DOWNLOAD_URL != ""
- name: "Download and install the GPU driver."
  shell: |
    sudo wget {{GPU_DRIVER_DOWNLOAD_URL}} -q
    sudo bash $(basename {{GPU_DRIVER_DOWNLOAD_URL}}) -s
  when: GPU_DRIVER_DOWNLOAD_URL != ""
- name: "Download and install the Nvidia container toolkit."
  shell: |
    curl -fsSL https://nvidia.github.io/libnvidia-container/gpgkey | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg \
    && curl -s -L https://nvidia.github.io/libnvidia-container/debian10/libnvidia-container.list | \
    sed 's#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g' | \
    sudo tee /etc/apt/sources.list.d/nvidia-container-toolkit.list
    sudo apt-get update
    sudo apt-get install -y nvidia-container-toolkit
    sudo nvidia-ctk runtime configure --runtime=docker
    sudo systemctl restart docker
  when: GPU_DRIVER_DOWNLOAD_URL != ""
- name: "Download and register the vGPU license"
  shell: |
    sudo wget {{VGPU_LICENSE_DOWNLOAD_URL}} -q
    sudo chmod 744 $(basename {{VGPU_LICENSE_DOWNLOAD_URL}})
    sudo mv $(basename {{VGPU_LICENSE_DOWNLOAD_URL}}) /etc/nvidia/ClientConfigToken
  when: VGPU_LICENSE_DOWNLOAD_URL != ""
